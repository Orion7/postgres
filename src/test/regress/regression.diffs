*** /home/orion/postgres/src/test/regress/expected/create_index.out	2014-11-21 01:48:04.319414000 +0300
--- /home/orion/postgres/src/test/regress/results/create_index.out	2014-12-01 04:19:26.259196533 +0300
***************
*** 1697,1702 ****
--- 1697,1710 ----
  SET enable_indexscan = OFF;
  SET enable_bitmapscan = ON;
  CREATE INDEX intarrayidx ON array_index_op_test USING gin (i);
+ NOTICE:  REGISTER.slot = 0, gen = 1
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 1
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 1
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 0, gen = 2
+ NOTICE:  works 3
  explain (costs off)
  SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno;
                       QUERY PLAN                     
***************
*** 1943,1948 ****
--- 1951,1964 ----
  (1 row)
  
  CREATE INDEX textarrayidx ON array_index_op_test USING gin (t);
+ NOTICE:  REGISTER.slot = 0, gen = 3
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 2
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 1, gen = 3
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 2, gen = 2
+ NOTICE:  works 3
  explain (costs off)
  SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno;
                           QUERY PLAN                         
***************
*** 2147,2152 ****
--- 2163,2176 ----
  -- And try it with a multicolumn GIN index
  DROP INDEX intarrayidx, textarrayidx;
  CREATE INDEX botharrayidx ON array_index_op_test USING gin (i, t);
+ NOTICE:  REGISTER.slot = 0, gen = 4
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 4
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 3
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 0, gen = 5
+ NOTICE:  works 3
  SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno;
   seqno |                i                |                                                                 t                                                                  
  -------+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------
***************
*** 2233,2238 ****
--- 2257,2270 ----
  CREATE TABLE array_gin_test (a int[]);
  INSERT INTO array_gin_test SELECT ARRAY[1, g%5, g] FROM generate_series(1, 10000) g;
  CREATE INDEX array_gin_test_idx ON array_gin_test USING gin (a);
+ NOTICE:  REGISTER.slot = 0, gen = 6
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 5
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 4
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 3, gen = 1
+ NOTICE:  works 3
  SELECT COUNT(*) FROM array_gin_test WHERE a @> '{2}';
   count 
  -------
***************
*** 2245,2250 ****
--- 2277,2290 ----
  --
  CREATE INDEX gin_relopts_test ON array_index_op_test USING gin (i)
    WITH (FASTUPDATE=on, GIN_PENDING_LIST_LIMIT=128);
+ NOTICE:  REGISTER.slot = 0, gen = 7
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 6
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 5
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 3, gen = 2
+ NOTICE:  works 3
  \d+ gin_relopts_test
       Index "public.gin_relopts_test"
   Column |  Type   | Definition | Storage 

======================================================================

*** /home/orion/postgres/src/test/regress/expected/gin.out	2014-11-21 01:48:04.323416000 +0300
--- /home/orion/postgres/src/test/regress/results/gin.out	2014-12-01 04:19:33.175196506 +0300
***************
*** 6,11 ****
--- 6,19 ----
  -- Create and populate a test table with a GIN index.
  create table gin_test_tbl(i int4[]);
  create index gin_test_idx on gin_test_tbl using gin (i) with (fastupdate = on);
+ NOTICE:  REGISTER.slot = 0, gen = 8
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 7
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 6
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 3, gen = 3
+ NOTICE:  works 3
  insert into gin_test_tbl select array[1, 2, g] from generate_series(1, 20000) g;
  insert into gin_test_tbl select array[1, 3, g] from generate_series(1, 1000) g;
  vacuum gin_test_tbl; -- flush the fastupdate buffers

======================================================================

*** /home/orion/postgres/src/test/regress/expected/tsearch.out	2014-11-21 01:48:04.363435000 +0300
--- /home/orion/postgres/src/test/regress/results/tsearch.out	2014-12-01 04:19:35.751196495 +0300
***************
*** 151,156 ****
--- 151,164 ----
  RESET enable_seqscan;
  DROP INDEX wowidx;
  CREATE INDEX wowidx ON test_tsvector USING gin (a);
+ NOTICE:  REGISTER.slot = 0, gen = 9
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 8
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 7
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 3, gen = 4
+ NOTICE:  works 3
  SET enable_seqscan=OFF;
  SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
   count 
***************
*** 1095,1100 ****
--- 1103,1116 ----
  -- test finding items in GIN's pending list
  create temp table pendtest (ts tsvector);
  create index pendtest_idx on pendtest using gin(ts);
+ NOTICE:  REGISTER.slot = 0, gen = 10
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 9
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 8
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 3, gen = 5
+ NOTICE:  works 3
  insert into pendtest values (to_tsvector('Lore ipsam'));
  insert into pendtest values (to_tsvector('Lore ipsum'));
  select * from pendtest where 'ipsu:*'::tsquery @@ ts;

======================================================================

*** /home/orion/postgres/src/test/regress/expected/jsonb.out	2014-11-21 01:48:04.323416000 +0300
--- /home/orion/postgres/src/test/regress/results/jsonb.out	2014-12-01 04:19:36.095196494 +0300
***************
*** 1888,1893 ****
--- 1888,1901 ----
  (1 row)
  
  CREATE INDEX jidx ON testjsonb USING gin (j);
+ NOTICE:  REGISTER.slot = 0, gen = 11
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 1, gen = 10
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 2, gen = 9
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 3, gen = 6
+ NOTICE:  works 3
  SET enable_seqscan = off;
  SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
   count 
***************
*** 1964,1969 ****
--- 1972,1985 ----
  
  -- array exists - array elements should behave as keys (for GIN index scans too)
  CREATE INDEX jidx_array ON testjsonb USING gin((j->'array'));
+ NOTICE:  REGISTER.slot = 0, gen = 12
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 0, gen = 13
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 0, gen = 14
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 0, gen = 15
+ NOTICE:  works 3
  SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar';
   count 
  -------
***************
*** 2074,2079 ****
--- 2090,2103 ----
  --gin path opclass
  DROP INDEX jidx;
  CREATE INDEX jidx ON testjsonb USING gin (j jsonb_path_ops);
+ NOTICE:  REGISTER.slot = 0, gen = 16
+ NOTICE:  works 0
+ NOTICE:  REGISTER.slot = 0, gen = 17
+ NOTICE:  works 1
+ NOTICE:  REGISTER.slot = 1, gen = 11
+ NOTICE:  works 2
+ NOTICE:  REGISTER.slot = 2, gen = 10
+ NOTICE:  works 3
  SET enable_seqscan = off;
  SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
   count 

======================================================================

